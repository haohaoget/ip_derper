name: 'Submodules Sync'

on:
  # push:
  #     paths:
  #       - '.github/workflows/submodule-sync.yml'
  schedule:
  - cron: "0 2 * * *"
  # Allows you to run this workflow manually from the Actions tab or through HTTP API
  workflow_dispatch:
    inputs:
        ssh:
          description: 'SSH connection to Actions'
          required: false
          default: 'false'

jobs:
  sync:
    name: 'Submodules Sync'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.TOKEN }}
        submodules: true
        
    - name: SSH 连接到 Actions
      uses: P3TERX/ssh2actions@main
      if: (github.event.inputs.ssh == 'true') || contains(github.event.action, 'ssh')
      
    # Update references
    - name: Git Sumbodule Update
      run: |
        # 更新主仓库代码的同时保证子模块同样更新到仓库记录的状态
        git pull --recurse-submodules
        #git submodule sync --recursive
        #git submodule update --remote --recursive --init --checkout $(git describe --tags --abbrev=0)
        # 让子模块直接从它们各自的远程仓库拉取最新代码，并支持更新嵌套子模块
        git submodule update --remote --recursive
        # git -C tailscale fetch --tags
        cd tailscale
        #获取非pre的最新版本tag
        # LatestTag=$(git tag --sort=-creatordate | grep -v "pre" | head -n 1)
        # LatestTag=$(curl -s https://api.github.com/repos/tailscale/tailscale/releases | jq -r '.[] | select(.tag_name | contains("-pre") | not) | .tag_name' | head -n 1)
        # 截取第二个
        LatestTag=$(curl -s https://api.github.com/repos/tailscale/tailscale/releases | jq -r '.[] | select(.tag_name | contains("-pre") | not) | .tag_name' | head -n 2 | tail -n 1)
        # 拉取所有远程 tag
        git fetch --tags
    
        # 检查 tag 是否存在
        if git rev-parse "$LatestTag" >/dev/null 2>&1; then
          echo "切换到 tag: $LatestTag"
          git checkout "$LatestTag"
        else
          echo "错误: tag '$LatestTag' 不存在！"
          exit 1
        fi
    
        cd ..
        # git -C tailscale checkout "$LatestTag"
        


    - name: Commit update
      run: |
        git config --global user.name 'Git bot'
        git config --global user.email 'bot@noreply.github.com'
        git remote set-url origin https://x-access-token:${{ secrets.TOKEN }}@github.com/${{ github.repository }}
        git commit -am "Auto updated submodule references" && git push || echo "No changes to commit"
